name: "Composer Update Workflow"
description: "Updates all specified composer packages and creates a pull request with the changes."

inputs:
  aws_access_key_id:
    description: "An Amazon IAM access key"
    required: true
    type: string
  aws_secret_access_key:
    description: "An Amazon IAM access secret"
    required: true
    type: string
  aws_region:
    description: "An Amazon region code for accessing ECR."
    required: false
    type: string
    default: "us-east-1"
  github_access_token:
    description: "A GitHub personal access token."
    required: true
    type: string
  patch_branch:
    description: "The base branch to create a pull request against when there are updates."
    required: false
    default: "develop"
    type: string
  patch_packages:
    description: "The package(s) to check for updates."
    required: false
    default: "drupal/* unocha/* drush/*"
    type: string
  patch_config:
    description: "A flag that specifies whether to run updates and generate updated Drupal config."
    required: false
    type: string
    default: "true"
  patch_author:
    description: "A git identifier for the author of the patch that is to be created."
    required: false
    type: string
    default: "unocha-jenkins <ops+github@reliefweb.int>"
  patch_maintainers:
    description: "A comma delimited list of repository maintainers who will be assigned for review."
    required: false
    type: string
    default: "digital-services-drupal-maintainers"
  slack_bot_token:
    description: "The secret slack authentication token"
    required: false
    type: string
  slack_channel_name:
    description: "The slack channel to send the message to"
    required: false
    type: string
  source_directory:
    description: "The source directory under which to look for (custom) code."
    required: false
    default: "html/modules/custom"
    type: string
  output_format:
    description: "The format out the issues list markdown."
    required: false
    default: "list"
    type: string

runs:
  using: "composite"
  steps:
  - name: Git work-around
    id: workaround
    uses: cafuego/command-output@main
    with:
      run: git config --global --add safe.directory ${{ github.workspace }}

  - name: Checkout code
    id: checkout
    uses: actions/checkout@v4
    with:
      ref: '${{ inputs.patch_branch }}'
      token: '${{ inputs.github_access_token }}'

  - name: Extract PHP Version
    id: php
    uses: docker://ghcr.io/un-ocha/actions:extract-php-version-main
    with:
      docker_file: 'docker/Dockerfile'
      docker_image: 'public.ecr.aws/unocha/php-k8s'

  - name: Setup PHP with PECL extension locally
    uses: shivammathur/setup-php@v2
    if: ${{ env.ACT }}
    with:
      php-version: ${{ inputs.php_version }}
      extensions: gd, mbstring, xmlwriter, dom, curl
      tools: composer
    env:
      fail-fast: true
      runner: self-hosted

  - name: Setup PHP with PECL extension
    uses: shivammathur/setup-php@v2
    if: ${{ !env.ACT }}
    with:
      php-version: ${{ steps.php.outputs.php_version }}
      extensions: gd, mbstring, xmlwriter, dom, curl
      tools: composer
    env:
      fail-fast: true

  - name: Software versions
    id: versions
    uses: cafuego/command-output@main
    with:
      run: php --version && composer --version

  - name: Configure AWS Credentials
    id: aws
    if: contains(${{ inputs.patch_packages }}, 'drupal')
    uses: aws-actions/configure-aws-credentials@v4
    with:
      aws-access-key-id: ${{ inputs.aws_access_key_id }}
      aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
      aws-region: ${{ inputs.aws_region }}

  - name: Login to Public ECR
    id: aws-login
    if: contains(${{ inputs.patch_packages }}, 'drupal')
    uses: docker/login-action@v3.0.0
    with:
      registry: public.ecr.aws
      username: ${{ inputs.aws_access_key_id }}
      password: ${{ inputs.aws_secret_access_key }}
    env:
      AWS_REGION: us-east-1

  - name: Composer Install
    id: install
    uses: cafuego/command-output@main
    with:
      run: composer install --no-interaction --prefer-dist --no-scripts
    continue-on-error: true

  - name: Composer Update
    id: update
    uses: cafuego/command-output@main
    with:
      run: composer update --with-all-dependencies ${{ inputs.patch_packages }} --no-interaction --prefer-dist --no-scripts
    continue-on-error: false

  - name: Composer Outdated
    id: outdated
    uses: cafuego/command-output@main
    with:
      run: composer outdated --direct --no-scripts
    continue-on-error: false

  - name: Check Drupal Issues
    id: issues
    if: contains(${{ inputs.patch_packages }}, 'drupal')
    uses: docker://ghcr.io/un-ocha/actions:drupal-issues-main
    with:
      source_directory: ${{ inputs.source_directory }}
      output_format: ${{ inputs.output_format }}
    continue-on-error: true

  - name: Build Image
    id: build
    if: inputs.patch_config == 'true' && contains(inputs.patch_packages, 'drupal')
    uses: cafuego/command-output@main
    with:
      run: |
        make
    env:
      fail-fast: true

  - name: Setup Environment
    id: setup-environment
    if: inputs.patch_config == 'true' && contains(inputs.patch_packages, 'drupal')
    uses: cafuego/command-output@main
    with:
      run: |
        docker compose -f tests/docker-compose.yml up -d
        sleep 10
        docker ps -a
        docker compose -f tests/docker-compose.yml exec -w /srv/www -T drupal composer install
    env:
      fail-fast: true

  - name: Install Environment
    id: install-environment
    if: inputs.patch_config == 'true' && contains(inputs.patch_packages, 'drupal')
    uses: cafuego/command-output@main
    with:
      run: |
        docker compose -f tests/docker-compose.yml exec -T drupal drush -y si minimal --existing-config --verbose
    env:
      fail-fast: true

  - name: Run updates and export config
    id: export-config
    if: inputs.patch_config == 'true' && contains(inputs.patch_packages, 'drupal')
    uses: cafuego/command-output@main
    with:
      run: |
        docker compose -f tests/docker-compose.yml exec -T drupal drush -y config:import --source /srv/www/config
        docker compose -f tests/docker-compose.yml exec -T drupal drush -y updatedb
        docker compose -f tests/docker-compose.yml exec -T drupal drush cache:rebuild
        docker compose -f tests/docker-compose.yml exec -T drupal drush -y config:export --destination /srv/www/config
    env:
      fail-fast: true

  - name: Install lock-diff
    id: install-lock-diff
    shell: bash
    run: composer global require davidrjonas/composer-lock-diff:^1.0
    continue-on-error: true

  - name: Run lock-diff
    id: run-lock-diff
    uses: cafuego/command-output@main
    with:
      run: ~/.composer/vendor/bin/composer-lock-diff --md
    continue-on-error: true

  - name: Create Pull Request
    id: pull
    uses: peter-evans/create-pull-request@v6
    with:
      token: ${{ inputs.github_access_token }}
      commit-message: "chore: Update all outdated ${{ inputs.patch_packages }} packages."
      title: "Automatic Composer Update"
      body: |
        ### Composer Update

        ${{ steps.run-lock-diff.outputs.stdout }}

        #### Potential Issues

        ${{ steps.issues.outputs.drupal_issues }}

        #### Software Versions `${{ steps.versions.outcome }}`

        <details><summary>Software Versions</summary>
        <code>${{ steps.versions.outputs.stdout }}</code>
        </details>

        #### Composer Outdated `${{ steps.outdated.outcome }}`

        <details><summary>Composer Outdated</summary>
        <code>${{ steps.outdated.outputs.stdout }}</code>
        </details>

        #### Composer Update `${{ steps.update.outcome }}`

        <details><summary>Composer Update Output</summary>
        <code>${{ steps.update.outputs.stdout }}</code>
        </details>

        <details><summary>Composer Update Diagnostic Output</summary>
        <code>${{ steps.update.outputs.stderr }}</code>
        </details>

        *Pusher: @${{ github.actor }}, Action: `${{ github.event_name }}`, Workflow: `${{ github.workflow }}`*
      committer: ${{ inputs.patch_author }}
      author: ${{ inputs.patch_author }}
      branch: update/patch
      branch-suffix: short-commit-hash
      base: ${{ inputs.patch_branch }}
      assignees: ${{ inputs.patch_maintainers}}
      reviewers: ${{ inputs.patch_maintainers}}
    continue-on-error: true

  - name: Slack Success Notification
    id: slack_success
    if: success() && inputs.slack_bot_token && inputs.slack_channel_name && steps.pull.outputs.pull-request-number
    uses: slackapi/slack-github-action@v1.25.0
    with:
      channel-id: '${{ inputs.slack_channel_name }}'
      payload: |
        {
          "text": "Created an up to date pull request for ${{ github.repository }} from ${{ github.ref }} ${{ job.status }}",
          "attachments": [
            {
              "color": "#36A64F",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Created an up to date pull request for ${{ github.repository }} from ${{ github.ref }} ${{ job.status }} (<${{ steps.pull.outputs.pull-request-url }}|Review>)"
                  }
                }
              ]
            }
          ]
        }
    env:
      SLACK_BOT_TOKEN: ${{ inputs.slack_bot_token }}

  - name: Slack Failure Notification
    id: slack_failure
    if: failure() && inputs.slack_bot_token && inputs.slack_channel_name
    uses: slackapi/slack-github-action@v1.25.0
    with:
      channel-id: '${{ inputs.slack_channel_name }}'
      payload: |
        {
          "text": "Failed to apply updates for ${{ github.repository }}",
          "attachments": [
            {
              "color": "#FF0000",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Failed to apply updates for ${{ github.repository }} (<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|Review>)"
                  }
                }
              ]
            }
          ]
        }
    env:
      SLACK_BOT_TOKEN: ${{ inputs.slack_bot_token }}
